require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const prompts = require('./prompts');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(process.env.BOT_TOKEN, {polling: true});

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userMessages = new Map();
const lastResponses = new Map();

// –î–æ–±–∞–≤–ª—è–µ–º Map –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const managerMode = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini
async function getGeminiResponse(prompt) {
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-pro" });
    const result = await model.generateContent(prompt);
    const response = await result.response;
    return response.text();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini:', error);
    return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.';
  }
}

async function sendResponseWithButton(chatId, userMessage) {
  try {
    bot.sendChatAction(chatId, 'typing');
    let response = await getGeminiResponse(userMessage);
    
    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    // if (managerMode.get(chatId)) {
    //   response = await getGeminiResponse(prompts.manager(response));
    // }
    
    userMessages.set(chatId, userMessage);
    lastResponses.set(chatId, response);
    
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üîÑ', callback_data: 'regenerate' },
          { text: '‚ù§Ô∏è', callback_data: 'like' },
          { text: 'üìù', callback_data: 'improve' }
        ]
      ]
    };
    
    bot.sendMessage(chatId, response, { reply_markup: keyboard });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userMessage = msg.text;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
//   if (userMessage === 'üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä') {
//     const currentMode = !managerMode.get(chatId);
//     managerMode.set(chatId, currentMode);
//     const status = currentMode ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω';
//     bot.sendMessage(chatId, `–†–µ–∂–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ${status}`, {
//       reply_markup: {
//         keyboard: [
//           [{ text: 'üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä' }]
//         ],
//         resize_keyboard: true
//       }
//     });
//     return;
//   }

  await sendResponseWithButton(chatId, userMessage);
});

// –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  managerMode.set(chatId, false);
  
//   bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ú–µ–Ω–µ–¥–∂–µ—Ä" –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞.', {
//     reply_markup: {
//       keyboard: [
//         [{ text: 'üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä' }]
//       ],
//       resize_keyboard: true
//     }
//   });
});

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  
  if (query.data === 'regenerate') {
    const lastMessage = userMessages.get(chatId);
    if (lastMessage) {
      await sendResponseWithButton(chatId, lastMessage);
    }
  } else if (query.data === 'like') {
    bot.sendMessage(chatId, '‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!');
  } else if (query.data === 'improve') {
    const lastResponse = lastResponses.get(chatId);
    if (lastResponse) {
      bot.sendChatAction(chatId, 'typing');
      const improvedResponse = await getGeminiResponse(prompts.improve(lastResponse));
      bot.sendMessage(chatId, improvedResponse);
    }
  }
  
  bot.answerCallbackQuery(query.id);
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'); 